// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// ws2812 //
// ------ //

#define ws2812_wrap_target 0
#define ws2812_wrap 3

#define ws2812_T1 2
#define ws2812_T2 5
#define ws2812_T3 3

static const uint16_t ws2812_program_instructions[] = {
            //     .wrap_target
    0x6221, //  0: out    x, 1            side 0 [2] 
    0x1123, //  1: jmp    !x, 3           side 1 [1] 
    0x1400, //  2: jmp    0               side 1 [4] 
    0xa442, //  3: nop                    side 0 [4] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ws2812_program = {
    .instructions = ws2812_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config ws2812_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ws2812_wrap_target, offset + ws2812_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
static inline void ws2812_program_init(PIO pio, uint sm, uint offset, uint pin, float freq, bool rgbw) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_config c = ws2812_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, rgbw ? 32 : 24);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    int cycles_per_bit = ws2812_T1 + ws2812_T2 + ws2812_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

// --------------- //
// ws2812_parallel //
// --------------- //

#define ws2812_parallel_wrap_target 0
#define ws2812_parallel_wrap 3

#define ws2812_parallel_T1 2
#define ws2812_parallel_T2 5
#define ws2812_parallel_T3 3

static const uint16_t ws2812_parallel_program_instructions[] = {
            //     .wrap_target
    0x6020, //  0: out    x, 32                      
    0xa10b, //  1: mov    pins, !null            [1] 
    0xa401, //  2: mov    pins, x                [4] 
    0xa103, //  3: mov    pins, null             [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ws2812_parallel_program = {
    .instructions = ws2812_parallel_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config ws2812_parallel_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ws2812_parallel_wrap_target, offset + ws2812_parallel_wrap);
    return c;
}

#include "hardware/clocks.h"
static inline void ws2812_parallel_program_init(PIO pio, uint sm, uint offset, uint pin_base, uint pin_count, float freq) {
    for(uint i=pin_base; i<pin_base+pin_count; i++) {
        pio_gpio_init(pio, i);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, pin_count, true);
    pio_sm_config c = ws2812_parallel_program_get_default_config(offset);
    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_out_pins(&c, pin_base, pin_count);
    sm_config_set_set_pins(&c, pin_base, pin_count);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    int cycles_per_bit = ws2812_parallel_T1 + ws2812_parallel_T2 + ws2812_parallel_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

// ----------- //
// boot_status //
// ----------- //

#define boot_status_wrap_target 1
#define boot_status_wrap 3

static const uint16_t boot_status_program_instructions[] = {
    0xe080, //  0: set    pindirs, 0                 
            //     .wrap_target
    0x4001, //  1: in     pins, 1                    
    0x8020, //  2: push   block                      
    0x0001, //  3: jmp    1                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program boot_status_program = {
    .instructions = boot_status_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config boot_status_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + boot_status_wrap_target, offset + boot_status_wrap);
    return c;
}

static inline void boot_status_program_init(PIO pio, uint sm, uint offset, uint pin) {
    // Here the `offset` parameter to this function is passed to the 
    // `<program_name>_program_get_default_config` function, where the
    // `offset` parameter is the offset in memory where our program is
    // loaded into memory at runtime based on the availability of memory.
    // This returns a variable of type `pio_sm_config`.
    pio_sm_config seq = boot_status_program_get_default_config(offset);
    // We use the `seq` (structure to modfiy) variable to set the GPIO
    // pins associated with the PIO to input mode. Here the first parameter
    // is the pointer to the modifiable struct (which is `seq` in this case),
    // `in_base` which is the first pin to set as input (which is the `pin`
    // parameter passed to this function).
    sm_config_set_in_pins(&seq, pin);
    sm_config_set_in_shift(&seq, false, true, 0);
    // Set this pin's GPIO function (connect PIO to the pad). Map the `pin`
    // to that particular `pio`.
    pio_gpio_init(pio, pin);
    // Set the pin direction to input at the PIO, pass the PIO instance, the SM 
    // in that PIO, the `pin_base`, the number of pins from the pin base to be set
    // as input, and whether the pin direction is output (which is false).
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &seq);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif

