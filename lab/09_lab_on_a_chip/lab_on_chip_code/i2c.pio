
.program i2c
.side_set 1 opt pindirs


do_nack:
    jmp y-- entry_point        ; proceed if NAK was anticipated
    irq wait 0 rel             ; Or else, stop and seek assistance.

do_byte:
    set x, 7                   ; repeat 8 times
bitloop:
    out pindirs, 1         [7] ; write data in serial form (all-ones if reading)
    nop             side 1 [2] ; rising edge of SCL
    wait 1 pin, 1          [4] ; Permit the clock to be extended
    in pins, 1             [7] ; During the SCL pulse, a sample of data is read.
    jmp x-- bitloop side 0 [7] ; Falling edge SCL

    
    out pindirs, 1         [7] ; We send the ACK for reads.
    nop             side 1 [7] ; rising edge of SCL
    wait 1 pin, 1          [7] ; Permit the clock to be extended
    jmp pin do_nack side 0 [2] ; Test SDA for ACK/NAK, and if ACK, fall through.

public entry_point:
.wrap_target
    out x, 6                   ; unpacking initial count
    out y, 1                   ; Disassemble the NAK ignore bit.
    jmp !x do_byte             ; This is a data record, instr == 0.
    out null, 32               ; Rest of this OSR is invalid because Instr > 0.
do_exec:
    out exec, 16               ; One action should be taken for each FIFO word.
    jmp x-- do_exec            ; n + 1 times more times
.wrap

% c-sdk {

#include "hardware/clocks.h"
#include "hardware/gpio.h"


static inline void i2c_program_init(PIO pio, uint sm, uint offset, uint pin_sda, uint pin_scl) {
    assert(pin_scl == pin_sda + 1);
    pio_sm_config c = i2c_program_get_default_config(offset);

    
    sm_config_set_out_pins(&c, pin_sda, 1);
    sm_config_set_set_pins(&c, pin_sda, 1);
    sm_config_set_in_pins(&c, pin_sda);
    sm_config_set_sideset_pins(&c, pin_scl);
    sm_config_set_jmp_pin(&c, pin_sda);

    sm_config_set_out_shift(&c, false, true, 16);
    sm_config_set_in_shift(&c, false, true, 8);

    float div = (float)clock_get_hz(clk_sys) / (32 * 100000);
    sm_config_set_clkdiv(&c, div);

    gpio_pull_up(pin_scl);
    gpio_pull_up(pin_sda);
    uint32_t both_pins = (1u << pin_sda) | (1u << pin_scl);
    pio_sm_set_pins_with_mask(pio, sm, both_pins, both_pins);
    pio_sm_set_pindirs_with_mask(pio, sm, both_pins, both_pins);
    pio_gpio_init(pio, pin_sda);
    gpio_set_oeover(pin_sda, GPIO_OVERRIDE_INVERT);
    pio_gpio_init(pio, pin_scl);
    gpio_set_oeover(pin_scl, GPIO_OVERRIDE_INVERT);
    pio_sm_set_pins_with_mask(pio, sm, 0, both_pins);

    pio_set_irq0_source_enabled(pio, pis_interrupt0 + sm, false);
    pio_set_irq1_source_enabled(pio, pis_interrupt0 + sm, false);
    pio_interrupt_clear(pio, sm);


    pio_sm_init(pio, sm, offset + i2c_offset_entry_point, &c);
    pio_sm_set_enabled(pio, sm, true);
}

%}


.program set_scl_sda
.side_set 1 opt


    set pindirs, 0 side 0 [7] ; SCL = 0, SDA = 0
    set pindirs, 1 side 0 [7] ; SCL = 0, SDA = 1
    set pindirs, 0 side 1 [7] ; SCL = 1, SDA = 0
    set pindirs, 1 side 1 [7] ; SCL = 1, SDA = 1

% c-sdk {
enum {
    I2C_SC0_SD0 = 0,
    I2C_SC0_SD1,
    I2C_SC1_SD0,
    I2C_SC1_SD1
};
%}
